{"version":3,"sources":["constants.tsx","requestCache.tsx","translations.tsx","utils.tsx","gmail/gmailAPI.ts","gmail/MessageHeader.tsx","gmail/MessageBody.tsx","gmail/Message.tsx","gmail/Thread.tsx","gmail/ThreadList.tsx","gmail/LabelGroup.tsx","gmail/InboxView.tsx","GMail.tsx","components/TransferList.tsx","Settings.tsx","components/MiniDrawer.tsx","App.tsx","serviceWorker.js","index.tsx","logo.svg"],"names":["systemFolders","categories","noShow","concat","defaultSettings","labels","bundleLabels","sortLabel","keys","CacheFirst","cacheName","cacheInit","cache","this","initCache","caches","open","request","requestKey","response","put","Request","Response","JSON","stringify","Error","match","cachedResponse","json","undefined","fromCache","fromNetwork","NetworkFirst","translations","CATEGORY_UPDATES","CATEGORY_PERSONAL","CATEGORY_SOCIAL","CATEGORY_FORUMS","CATEGORY_PROMOTIONS","INBOX","DRAFT","CHAT","IMPORTANT","translate","labelName","arrayToMap","array","keyExtractor","valueExtractor","result","reduce","prev","curr","discoveryDocs","clientId","credentials","web","client_id","apiKey","api_key","gmailInstance","labelCache","labelCacheCF","threadCache","gmailApi","gapi","isSignedIn","signInStatusHandlers","window","load","client","init","scope","then","gmail","users","auth2","getAuthInstance","listen","updateSignInStatus","bind","get","error","console","log","authorize","handler","push","forEach","currentUser","getBasicProfile","labelIds","cacheKey","cacheFirst","length","batch","newBatch","labelId","add","id","userId","responses","Object","values","map","labelsSorted","filter","label","threadsTotal","sort","l1","l2","name","localeCompare","list","includes","getLabels","threads","labelFilter","q","resultSizeEstimate","a","b","historyId","messageId","messages","modify","removeLabelIds","threadId","threadIds","signIn","signOut","headerMap","headers","header","value","styles","createStyles","root","display","position","overflowX","transform","transition","archive","top","right","cursor","zIndex","MessageHeader","props","state","mounted","e","stopPropagation","setState","archiveMessage","message","noOfMessages","isThread","classes","payload","subject","from","replace","split","read","ref","React","createRef","CSSTransition","in","unmountOnExit","timeout","classNames","nodeRef","className","Avatar","title","snippet","style","Tag","text","key","textColor","color","backgroundColor","onClick","Component","withStyles","makeStyles","tagStyle","background","borderRadius","alignSelf","marginRight","padding","iconStyle","important","attachmentCache","getBody","encodedBody","convert","parts","body","data","getHTMLPart","arr","x","mimeType","decodeURIComponent","escape","atob","getAttachment","attachment","cid","Attachment","filename","MessageBody","iframe","timeOut","attachments","getAttachments","all","byCID","part","attachId","attachmentId","recAttachments","assign","join","logo","loadedAttachment","contentDocument","getElementsByTagName","innerHTML","setTimeout","contentWindow","height","document","scrollHeight","cancelTimeout","setIframeRef","width","Message","toggleOpen","Collapse","mountOnEnter","GmailThread","thread","getThread","_","archiveThread","lastMessage","trigger","ThreadList","LabelGroup","labelColors","category","unread","query","listThreads","Math","min","messagesUnread","archiveThreads","onArchived","rootRef","onExited","ListItem","button","ListItemText","primary","secondary","paddingLeft","InboxView","settings","lsget","getThreads","getLabelFilter","l","List","labelArchived","theme","flex","overflowY","palette","paper","withTheme","GMail","profileImage","onActivation","onSignInStatusChanged","src","alt","Button","variant","useStyles","margin","overflow","cardHeader","spacing","minHeight","not","indexOf","intersection","TransferList","useState","checked","setChecked","left","setLeft","setRight","getLabel","labelProvider","rightUpdated","selectionChanged","useEffect","leftChecked","rightChecked","handleToggle","currentIndex","newChecked","splice","numberOfChecked","items","handleToggleAll","customList","Card","CardHeader","avatar","Checkbox","indeterminate","disabled","inputProps","subheader","Divider","dense","component","role","ListItemIcon","tabIndex","disableRipple","Grid","container","justify","alignItems","item","direction","size","added","aria-label","removed","Settings","listAllLabels","toLowerCase","labelMap","unchosen","lsset","remove","hide","drawer","flexShrink","whiteSpace","drawerOpen","transitions","create","easing","sharp","duration","enteringScreen","drawerClose","leavingScreen","breakpoints","up","toolbar","justifyContent","mixins","content","flexGrow","MiniDrawer","useTheme","setOpen","handleDrawerClose","otherProps","CssBaseline","Drawer","clsx","IconButton","appBar","marginTop","marginLeft","shroud","down","bottom","appBarShift","menuButton","buttons","App","prefersDarkMode","useMediaQuery","setSignedIn","setProfileImage","setTitle","profile","getCurrentUserProfile","getImageUrl","useMemo","createMuiTheme","type","ThemeProvider","AppBar","Toolbar","edge","Typography","noWrap","to","path","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","status","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.39b2c0c9.chunk.js","sourcesContent":["import { ILabel } from \"./gmail/gmailAPI\";\r\n\r\nexport const stateLabels = ['STARRED', 'UNREAD', 'IMPORTANT']\r\nexport const systemFolders = ['SENT', 'TRASH', 'SPAM', 'DRAFT']\r\nexport const categories = ['category:social', 'category:promotions', 'category:updates', 'category:forums', 'category:reservations', 'category:purchases'] //'category:primary', \r\nexport const noShow = stateLabels.concat(systemFolders);\r\nexport const INBOX = 'INBOX';\r\nexport const defaultSettings : ISettings = { labels: {}, bundleLabels: {}, sortLabel: {} }\r\nexport const keys = { settings: 'settings', CACHE_ALL_LABELS: 'ALL-LABELS', CACHE_LABELS: 'LABELS', CACHE_THREADS: \"THREADS\", CACHE_BUNDLES: 'BUNDLES', CACHE_ATTACHMENTS: 'ATTACHMENTS' }\r\nexport interface ISettings {\r\n    labels: {},\r\n    bundleLabels:  { [key: string]: ILabel },\r\n    sortLabel: {}\r\n}","\r\nexport default class CacheFirst {\r\n    cacheInit: Promise<any>;\r\n    cache: Cache | null = null;\r\n    /**\r\n     * \r\n     * @param {string} cacheName \r\n     */\r\n    constructor(cacheName: string) {\r\n        this.cacheInit = this.initCache(cacheName);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {string} cacheName \r\n     */\r\n    async initCache(cacheName: string) {\r\n        this.cache = await caches.open(cacheName);\r\n        return this.cache;\r\n    }\r\n\r\n    async fromNetwork(request: Promise<any> | undefined, requestKey: RequestInfo) {\r\n        if (request) {\r\n            let response = await request;\r\n            this.cache?.put(new Request(requestKey), new Response(JSON.stringify(response)))\r\n            return response;\r\n        }\r\n        throw new Error(\"no request given\")\r\n    }\r\n\r\n    async fromCache(requestKey: RequestInfo) {\r\n        let cachedResponse = await this.cache?.match(new Request(requestKey));\r\n        if (cachedResponse) {\r\n            return await cachedResponse.json();\r\n        }\r\n        throw new Error(\"not found in cache\");\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {string} requestKey \r\n     * @param {Promise} request\r\n     */\r\n    async get(requestKey: RequestInfo, request: Promise<any> | undefined = undefined) {\r\n        if (!this.cache) {\r\n            await this.cacheInit;\r\n        }\r\n        try {\r\n            return await this.fromCache(requestKey)\r\n        } catch (err) {\r\n            try {\r\n                return await this.fromNetwork(request, requestKey);\r\n            } catch (err) {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class NetworkFirst extends CacheFirst {\r\n\r\n    /**\r\n     * \r\n     * @param {string} requestKey \r\n     * @param {Promise} request \r\n     */\r\n    async get(requestKey: RequestInfo, request: Promise<any> | undefined = undefined) {\r\n        if (!this.cache) {\r\n            await this.cacheInit;\r\n        }\r\n        try {\r\n            return await this.fromNetwork(request, requestKey);\r\n        } catch (err) {\r\n            try {\r\n                return await this.fromCache(requestKey)\r\n            }\r\n            catch (err) {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n}","const translations : any = {\r\n    CATEGORY_UPDATES: \"Benachrichtigungen\",\r\n    'category:updates': \"Benachrichtigungen\",\r\n    CATEGORY_PERSONAL: \"Persönlich\",\r\n    'category:personal': \"Persönlich\",\r\n    CATEGORY_SOCIAL: \"Soziale Medien\",\r\n    'category:social': \"Soziale Medien\",\r\n    CATEGORY_FORUMS: \"Foren\",\r\n    'category:forums': \"Foren\",\r\n    CATEGORY_PROMOTIONS: \"Werbung\",\r\n    'category:promotions': \"Werbung\",\r\n    'category:reservations': \"Reisen\",\r\n    'category:purchases': \"Käufe\",\r\n    INBOX: \"Posteingang\",\r\n    DRAFT: \"Entwürfe\",\r\n    CHAT: \"Chats\",\r\n    IMPORTANT: \"Wichtig\"\r\n}\r\n\r\nexport default function translate(labelName: string) {\r\n    if (translations[labelName])\r\n        return translations[labelName]\r\n    return labelName\r\n}","export function arrayToMap<T, V>(array: T[], keyExtractor: (el: T) => string, valueExtractor: (el: T) => V) {\r\n    let result: { [key: string]: V } = {};\r\n    array.reduce((prev, curr)=>{\r\n        prev[keyExtractor(curr)] = valueExtractor(curr);\r\n        return prev\r\n    }, result);\r\n    return result;\r\n}","import { keys, noShow } from \"../constants\";\r\nimport CacheFirst, { NetworkFirst } from \"../requestCache\";\r\nimport credentials from '../credentials.json';\r\n\r\n\r\n// Authorization scopes required by the API; \r\nconst scope = 'https://www.googleapis.com/auth/gmail.modify';\r\n// Array of API discovery doc URLs for APIs used by the quickstart\r\nconst discoveryDocs = [\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"];\r\n// api keys \r\nconst clientId = credentials.web.client_id;\r\nconst apiKey = credentials.web.api_key;\r\n\r\n\r\nexport class GmailApi {\r\n    labelCache: NetworkFirst = new NetworkFirst(keys.CACHE_LABELS);\r\n    labelCacheCF: CacheFirst = new CacheFirst(keys.CACHE_LABELS);\r\n    threadCache: NetworkFirst = new NetworkFirst(keys.CACHE_THREADS);\r\n    gmailApi: { labels: any, threads: any, messages: any } | null = null;\r\n    gapi: any;\r\n    isSignedIn: boolean = false;\r\n    signInStatusHandlers: SigninStatusHandler[] = [];\r\n\r\n    init() {\r\n        this.gapi = window.gapi;\r\n        this.gapi.load('client:auth2', () => {\r\n            this.gapi.client.init({ apiKey, clientId, discoveryDocs, scope }).then(() => {\r\n                this.gmailApi = window.gapi.client.gmail.users;\r\n                //register signin status event handler\r\n                this.gapi.auth2.getAuthInstance().isSignedIn.listen(this.updateSignInStatus.bind(this));\r\n\r\n                // Handle the initial sign-in state.\r\n                this.updateSignInStatus(this.gapi.auth2.getAuthInstance().isSignedIn.get());\r\n            }, (error: any) => {\r\n                console.log('Error: ' + error)\r\n            })\r\n        });\r\n        this.authorize.bind(this)\r\n    }\r\n\r\n    onSignInStatusChanged(handler: SigninStatusHandler) {\r\n        this.signInStatusHandlers.push(handler);\r\n        handler(this.isSignedIn);\r\n    }\r\n\r\n    updateSignInStatus(isSignedIn: boolean) {\r\n        this.isSignedIn = isSignedIn;\r\n        this.signInStatusHandlers.forEach(handler => handler(isSignedIn));\r\n    }\r\n\r\n    getCurrentUserProfile(): Profile {\r\n        return this.gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile();\r\n    }\r\n\r\n    async getLabels(labelIds: string[], cacheKey: string, cacheFirst?: boolean) {\r\n        if (labelIds.length > 0) {\r\n            let batch = window.gapi.client.newBatch();\r\n            labelIds.forEach(labelId => {\r\n                batch.add(this.gmailApi?.labels.get({\r\n                    id: labelId,\r\n                    userId: 'me'\r\n                }));\r\n            });\r\n            let cache = cacheFirst ? this.labelCacheCF : this.labelCache;\r\n            let responses: Response<Response<ILabel>> = await cache.get(cacheKey, batch);\r\n            let labels: ILabel[] = Object.values(responses.result).map((response: Response<ILabel>) => response.result);\r\n            let labelsSorted = labels.filter(label => label.threadsTotal > 0).sort((l1, l2) => l1.name.localeCompare(l2.name));\r\n            return labelsSorted\r\n        }\r\n        return [];\r\n    }\r\n\r\n\r\n    async listAllLabels(): Promise<ILabel[]> {\r\n        return this.gmailApi?.labels.list({\r\n            'userId': 'me'\r\n        }).then((response: { result: { labels: [{ id: string }]; }; }) => {\r\n            let labelIds = response.result.labels.filter(label => !noShow.includes(label.id)).map(label => label.id);\r\n            return this.getLabels(labelIds, keys.CACHE_ALL_LABELS);\r\n        });\r\n    }\r\n\r\n    async getThread(id: string): Promise<Response<IThread>> {\r\n        return this.threadCache.get(id, this.gmailApi?.threads.get({ userId: 'me', id }))\r\n    }\r\n\r\n    async listThreads(cacheKey: string, labelFilter?: string, labelIds: string[] = ['INBOX']): Promise<ThreadResult> {\r\n        return this.threadCache.get(cacheKey, this.gmailApi?.threads.list({\r\n            userId: 'me',\r\n            q: labelFilter,\r\n            labelIds\r\n        })).then((response: Response<ThreadResult>) => {\r\n            if (response.result.resultSizeEstimate > 0) {\r\n                response.result.threads = response.result.threads.sort((a, b) => {\r\n                    return b.historyId - a.historyId\r\n                });\r\n            }\r\n            return response.result;\r\n        });\r\n    }\r\n\r\n    async archiveMessage(messageId: string): Promise<IMessage> {\r\n        return this.gmailApi?.messages.modify({\r\n            userId: 'me',\r\n            id: messageId,\r\n            removeLabelIds: [\"INBOX\"]\r\n        }).then((response: Response<IMessage>) => {\r\n            return response.result;\r\n        });\r\n    }\r\n\r\n    async archiveThread(threadId: string): Promise<IThread> {\r\n        return this.gmailApi?.threads.modify({\r\n            userId: 'me',\r\n            id: threadId,\r\n            removeLabelIds: [\"INBOX\"]\r\n        }).then((response: Response<IThread>) => {\r\n            return response.result;\r\n        });\r\n    }\r\n\r\n    async archiveThreads(threadIds: string[]){\r\n        let batch = window.gapi.client.newBatch();\r\n        threadIds.forEach(threadId => {\r\n            batch.add(this.gmailApi?.threads.modify({\r\n                userId: 'me',\r\n                id: threadId,\r\n                removeLabelIds: [\"INBOX\"]\r\n            }));\r\n        });\r\n        let responses: Response<Response<IThread>> = await batch;\r\n        return responses;\r\n    }\r\n\r\n\r\n    authorize() {\r\n        this.gapi.auth2.getAuthInstance().signIn();\r\n    }\r\n\r\n    signOut() {\r\n        this.gapi.auth2.getAuthInstance().signOut();\r\n    }\r\n}\r\n\r\n\r\ninterface SigninStatusHandler {\r\n    (isSignedIn: boolean): void;\r\n}\r\n\r\ninterface Profile {\r\n    getId(): string;\r\n    getName(): string;\r\n    getGivenName(): string;\r\n    getFamilyName(): string;\r\n    getImageUrl(): string;\r\n    getEmail(): string;\r\n}\r\n\r\nexport interface ILabel {\r\n    id: string,\r\n    threadsTotal: number,\r\n    name: string,\r\n    color?: {\r\n        textColor: string,\r\n        backgroundColor: string\r\n    }\r\n    messageListVisibility: string,\r\n    labelListVisibility: string,\r\n    type: string,\r\n    messagesTotal: number,\r\n    messagesUnread: number,\r\n    threadsUnread: number,\r\n};\r\n\r\nexport interface IThread {\r\n    id: string,\r\n    snippet: string,\r\n    historyId: number,\r\n    messages?: IMessage[]\r\n}\r\n\r\nexport interface ThreadResult {\r\n    threads: IThread[],\r\n    nextPageToken?: string,\r\n    resultSizeEstimate: number\r\n}\r\n\r\nexport interface Response<T> {\r\n    result: T\r\n}\r\n\r\nexport interface IMessage {\r\n    id: string,\r\n    threadId: string,\r\n    labelIds: [\r\n        string\r\n    ],\r\n    snippet: string,\r\n    historyId: number,\r\n    internalDate: number,\r\n    payload: {\r\n        partId: string,\r\n        mimeType: string,\r\n        filename: string,\r\n        headers: [\r\n            {\r\n                name: string,\r\n                value: string\r\n            }\r\n        ],\r\n        body: IAttachment,\r\n        parts: any[]\r\n    },\r\n    sizeEstimate: number,\r\n    raw: Buffer\r\n}\r\n\r\nexport interface IAttachment {\r\n    attachmentId: String,\r\n    size: number,\r\n    data: Buffer\r\n}\r\n\r\nconst gmailInstance = new GmailApi();\r\nexport default gmailInstance;\r\n\r\n","import React, { MouseEvent } from 'react';\r\nimport { Avatar, withStyles, WithStyles, createStyles, makeStyles } from '@material-ui/core';\r\nimport translate from '../translations';\r\nimport { arrayToMap } from '../utils';\r\nimport gmailInstance, { IMessage, ILabel } from './gmailAPI';\r\nimport ContactMailIcon from '@material-ui/icons/ContactMail';\r\nimport ArchiveIcon from '@material-ui/icons/Archive';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nexport function headerMap(headers: { name: string, value: any }[]) {\r\n    return arrayToMap(headers, header => header.name, header => header.value);\r\n}\r\n\r\n\r\nconst styles = createStyles({\r\n\r\n    root: {\r\n        display: 'flex',\r\n        position: 'relative',\r\n        \"&:hover $archive\": {\r\n            display: \"block\"\r\n        },\r\n        \"&-exit\": {\r\n            overflowX: \"hidden\",\r\n            transform: \"translateX(0)\",\r\n        },\r\n        \"&-exit-active\": {\r\n            transform: \"translateX(100%)\",\r\n            transition: \"transform 0.5s\"\r\n        }\r\n    },\r\n    header: {\r\n        overflowX: 'hidden'\r\n    },\r\n    archive: {\r\n        position: \"absolute\",\r\n        top: 10,\r\n        right: 10,\r\n        display: \"none\",\r\n        cursor: \"pointer\",\r\n        zIndex: 1\r\n    },\r\n})\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n    message: IMessage,\r\n    noOfMessages: number,\r\n    isThread?: boolean,\r\n    archiveMessage: (messageId: string) => void,\r\n}\r\n\r\ninterface State {\r\n    labels: ILabel[],\r\n    mounted: boolean\r\n}\r\n\r\n\r\nclass MessageHeader extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {\r\n            labels: [],\r\n            mounted: true\r\n        }\r\n    }\r\n\r\n    archive(e: MouseEvent) {\r\n        e.stopPropagation()\r\n        this.setState({mounted: false},()=>{\r\n            this.props.archiveMessage(this.props.message.id);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { message, noOfMessages, isThread, classes } = this.props;\r\n        let headers = headerMap(message.payload.headers)\r\n        const subject = headers[\"Subject\"];\r\n        const from = headers[\"From\"].replace(\">\", \"\").split(\"<\");\r\n        from[0] = from[0].replace(/\"|\\\\/g, '');\r\n        const read = !message.labelIds.includes(\"UNREAD\");\r\n        const ref = React.createRef<HTMLDivElement>();\r\n        return (\r\n            <CSSTransition\r\n                in={this.state.mounted}\r\n                unmountOnExit\r\n                timeout={500}\r\n                classNames={classes.root}\r\n                nodeRef={ref}\r\n            >\r\n                <div ref={ref} className={classes.root + \" message \" + (isThread ? \"threaded \" : \"\") + (read ? \"read\" : \"\")}>\r\n                    <Avatar>{from[0][0]}</Avatar>\r\n                    <div className={classes.header}>\r\n                        <div title={from[1]}><b>{from[0]}</b>{noOfMessages > 1 ? noOfMessages : \"\"}</div>\r\n                        <div><b>Subject:</b> {subject}</div>\r\n                        <div title={message.snippet} className=\"snippet\">{message.snippet}</div>\r\n                        <div style={{ display: \"flex\" }}>\r\n                            {this.state.labels.length === 0 ? <Tag id=\"placeHolder\" text={\"...\"}></Tag> : <></>}\r\n                            {this.state.labels.map((label: ILabel) => <Tag key={label.id} id={label.id} text={translate(label.name)} textColor={label.color?.textColor} backgroundColor={label.color?.backgroundColor}></Tag>)}\r\n                        </div>\r\n                    </div>\r\n                    <ArchiveIcon className={classes.archive} onClick={this.archive.bind(this)}></ArchiveIcon>\r\n                </div>\r\n            </CSSTransition>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        gmailInstance.getLabels(this.props.message.labelIds.filter(id => !['UNREAD', 'INBOX'].includes(id)), this.props.message.id, false)\r\n            .then(labels => {\r\n                this.setState({ labels });\r\n            })\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(MessageHeader);\r\n\r\nexport function Tag(props: { textColor?: string, backgroundColor?: string, id: string, text: string }) {\r\n    const classes = makeStyles({\r\n        tagStyle: {\r\n            color: props.textColor || 'black',\r\n            background: props.backgroundColor || 'white',\r\n            borderRadius: '0.25em',\r\n            display: 'inline-block',\r\n            alignSelf: \"center\",\r\n            marginRight: '5px',\r\n            padding: '0 5px',\r\n        },\r\n        iconStyle:\r\n        {\r\n            marginRight: '5px',\r\n        },\r\n        important: {\r\n            color: \"gold\"\r\n        }\r\n    })();\r\n    switch (props.id) {\r\n        case 'CATEGORY_PERSONAL':\r\n            return <ContactMailIcon className={classes.iconStyle} ></ContactMailIcon>\r\n        case 'IMPORTANT':\r\n            return <StarIcon className={classes.iconStyle + \" \" + classes.important}></StarIcon>\r\n    }\r\n    return <div className={classes.tagStyle} >{props.text}</div>\r\n}","import React, { Component } from 'react';\r\nimport { headerMap } from './MessageHeader';\r\nimport CacheFirst from '../requestCache';\r\nimport logo from '../logo.svg';\r\nimport { keys } from '../constants';\r\n\r\nvar attachmentCache = new CacheFirst(keys.CACHE_ATTACHMENTS);\r\n\r\nfunction getBody(message: { parts: any; body: { data: string; }; }) {\r\n    var encodedBody = '';\r\n    if (typeof message.parts === 'undefined') {\r\n        encodedBody = message.body.data;\r\n    }\r\n    else {\r\n        encodedBody = getHTMLPart(message.parts);\r\n    }\r\n    encodedBody = convert(encodedBody);\r\n    return decodeURIComponent(escape(window.atob(encodedBody)));\r\n}\r\n\r\nfunction convert(encodedBody: string) {\r\n    return encodedBody.replace(/-/g, '+').replace(/_/g, '/').replace(/\\s/g, '');\r\n}\r\n\r\nfunction getHTMLPart(arr: any[]): string {\r\n    for (var x = 0; x <= arr.length; x++) {\r\n        if (typeof arr[x].parts === 'undefined') {\r\n            if (arr[x].mimeType === 'text/html') {\r\n                return arr[x].body.data;\r\n            }\r\n        }\r\n        else {\r\n            return getHTMLPart(arr[x].parts);\r\n        }\r\n    }\r\n    return '';\r\n}\r\n\r\nasync function getAttachment(attachment: Attachment) {\r\n    return await attachmentCache.get(attachment.cid, attachment.request).then(response => {\r\n        attachment.data = response.result.data;\r\n        return attachment;\r\n    })\r\n    // return new Promise(resolve =>{\r\n    //     attachmentCache.match(new Request(attachment.cid)).then(cachedResponse=>{\r\n    //         if (cachedResponse){\r\n    //             cachedResponse.json().then(json=>{\r\n    //                 attachment.data = json.data;    \r\n    //                 resolve(attachment)\r\n    //             })\r\n\r\n\r\n    //         }else {\r\n    //             attachment.request.execute(response=>{\r\n    //                 attachmentCache.put(new Request(attachment.cid), new Response(JSON.stringify(response)));\r\n    //                 attachment.data = response.data;\r\n    //                 resolve(attachment);\r\n    //             })\r\n    //         }\r\n    //     })\r\n    // })\r\n}\r\n\r\nfunction getAttachments(parts: any, messageId: string): { all: Attachment[], byCID: {[key: string]: Attachment} } {\r\n    let attachments = { all: [] as Attachment[], byCID: {} as {[key: string]: Attachment} };\r\n    if (!parts)\r\n        return attachments;\r\n    for (let part of parts) {\r\n        if (part.filename && part.filename.length > 0) {\r\n            var attachId = part.body.attachmentId;\r\n            var request = window.gapi.client.gmail.users.messages.attachments.get({\r\n                'id': attachId,\r\n                messageId,\r\n                'userId': 'me'\r\n            });\r\n            let headers = headerMap(part.headers)\r\n            let cid = headers['Content-ID']\r\n            if (cid)\r\n                cid = cid.replace('<', '').replace('>', '');\r\n            let attachment = new Attachment(attachId, part.filename, cid, part.mimeType, request);\r\n            attachments.all.push(attachment)\r\n            if (cid) {\r\n                attachments.byCID[cid] = attachment;\r\n            }\r\n        } else if (part.mimeType === 'multipart/related') {\r\n            let recAttachments = getAttachments(part.parts, messageId);\r\n            attachments.all.push(...recAttachments.all);\r\n            Object.assign(attachments.byCID, recAttachments.byCID);\r\n        }\r\n\r\n    }\r\n    return attachments;\r\n}\r\n\r\nclass Attachment {\r\n    id: string;\r\n    filename: string;\r\n    cid: string;\r\n    mimeType: string;\r\n    request: any;\r\n    data?: any;\r\n    constructor(id: string, filename: string, cid: string, mimeType: string, request: any) {\r\n        this.id = id;\r\n        this.filename = filename;\r\n        this.cid = cid;\r\n        this.mimeType = mimeType;\r\n        this.request = request;\r\n        this.data = null;\r\n    }\r\n\r\n    setData(data: any) {\r\n        this.data = data;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n// function loadCID(messageId, cid, attachments) {\r\n\r\n\r\n//     return new Promise(resolve => {\r\n\r\n//         let fromStorage = ls.get(`${messageId}.${cid}`)\r\n//         if (fromStorage)\r\n//             resolve(fromStorage);\r\n//         else {\r\n//             let attachment = attachments.byCID[cid];\r\n//             if (attachment.loadingPromise) {\r\n//                 attachment.loadingPromise.then(resolve)\r\n//             } else {\r\n//                 attachment.loadingPromise = this;\r\n//                 attachment.request.execute(response => {\r\n//                     attachment.data = response.data;\r\n//                     let { request, loadingPromise, ...storeAttachtent } = attachment;\r\n//                     ls.set(`${messageId}.${cid}`, storeAttachtent);\r\n//                     resolve(attachment);\r\n//                 })\r\n//             }\r\n//         }\r\n//     });\r\n\r\n// }\r\n\r\nclass MessageBody extends Component<{message: any}, {body: string}> {\r\n    iframe: any;\r\n    timeOut?: number;\r\n\r\n    constructor(props: {message: any}) {\r\n        super(props)\r\n        this.state = {\r\n            body: getBody(props.message.payload)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let attachments = getAttachments(this.props.message.payload.parts, this.props.message.id);\r\n\r\n        let body = this.state.body;\r\n        // replace cids with placeholders\r\n        for (let cid of Object.keys(attachments.byCID)) {\r\n            body = body.split(`cid:${cid}`).join(`${logo}?${cid}`)\r\n        }\r\n        //inject mail.css\r\n        body = body.split('<head>').join('<head><link href=\"Mail.css\" rel=\"stylesheet\" type=\"text/css\">')\r\n        this.setState({body})\r\n\r\n        for (let attachment of Object.values(attachments.byCID)) {\r\n            getAttachment(attachment)\r\n                .then(loadedAttachment => {\r\n                    this.setState({ body: this.state.body.split(`${logo}?${loadedAttachment.cid}`).join(`data:${loadedAttachment.mimeType};base64,${convert(loadedAttachment.data)}`) })\r\n                })\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        const iframe = this.iframe;\r\n        const document = iframe.contentDocument;\r\n        const html = document.getElementsByTagName('html')[0];\r\n        html.innerHTML = this.state.body;\r\n        this.timeOut = window.setTimeout(() => {\r\n            if (iframe.contentWindow) {\r\n                iframe.height = iframe.contentWindow.document.body.scrollHeight + 30;\r\n            }\r\n        }, 200)\r\n    }\r\n\r\n    componentDidUnMount() {\r\n        window.cancelTimeout(this.timeOut);\r\n    }\r\n\r\n    setIframeRef(iframe: any) {\r\n        this.iframe = iframe;\r\n    }\r\n\r\n    render() {\r\n        return <iframe title={this.props.message.snippet} ref={this.setIframeRef.bind(this)} width=\"100%\"></iframe>\r\n    }\r\n}\r\n\r\nexport default MessageBody;","import React from 'react';\r\nimport { Collapse } from '@material-ui/core';\r\nimport MessageHeader from './MessageHeader';\r\nimport MessageBody from './MessageBody';\r\nimport { IMessage } from './gmailAPI';\r\n\r\ninterface Props {\r\n    message: IMessage,\r\n    isThread?: boolean,\r\n    archiveMessage: (messageId: string) => void\r\n}\r\n\r\nexport default class Message extends React.Component<Props> {\r\n    state = {\r\n        open: false\r\n    }\r\n\r\n    toggleOpen() {\r\n        this.setState({ open: !this.state.open })\r\n    }\r\n\r\n    render() {\r\n        const { message, isThread, archiveMessage } = this.props;\r\n        return (\r\n            <>\r\n                <div onClick={this.toggleOpen.bind(this)}>\r\n                    <MessageHeader message={message} noOfMessages={1} isThread={isThread} archiveMessage={archiveMessage} />\r\n                </div>\r\n                <Collapse in={this.state.open} mountOnEnter unmountOnExit>\r\n                    <MessageBody message={message}></MessageBody>\r\n                </Collapse>\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Collapsible from 'react-collapsible';\r\nimport MessageHeader from './MessageHeader';\r\nimport Message from './Message';\r\nimport CacheFirst from '../requestCache';\r\nimport { keys } from '../constants';\r\nimport gmailInstance, { IMessage, IThread } from './gmailAPI';\r\n\r\n\r\ninterface Props {\r\n    thread: IThread,\r\n    archiveThread: (id: string) => void;\r\n}\r\nclass GmailThread extends React.Component<Props, { messages: IMessage[] }> {\r\n    threadCache: CacheFirst;\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {\r\n            messages: this.props.thread.messages || [],\r\n        }\r\n        this.threadCache = new CacheFirst(keys.CACHE_THREADS);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.messages.length === 0) {\r\n            gmailInstance.getThread(this.props.thread.id)\r\n                .then(response => {\r\n                    const messages = response.result.messages;\r\n                    if (messages) {\r\n                        this.setState({\r\n                            messages\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    archiveMessage(messageId: string) {\r\n        gmailInstance.archiveMessage(messageId).then(_ => {\r\n            this.setState({ messages: this.state.messages.filter(message => message.id !== messageId) });\r\n        });\r\n    }\r\n\r\n    archiveThread() {\r\n        this.props.archiveThread(this.props.thread.id);\r\n    }\r\n\r\n    render() {\r\n        const noOfMessages = this.state.messages.length;\r\n        if (noOfMessages === 0) {\r\n            return <div>'loading...'</div>\r\n        } else {\r\n            const lastMessage = this.state.messages[noOfMessages - 1];\r\n            if (noOfMessages === 1) {\r\n                return (\r\n                    <Message message={lastMessage} archiveMessage={this.archiveThread.bind(this)} />\r\n                )\r\n            } else {\r\n                return (\r\n                    <Collapsible trigger={<MessageHeader message={lastMessage} noOfMessages={noOfMessages} archiveMessage={this.archiveThread.bind(this)} />}>\r\n                        {\r\n                            this.state.messages.map(message => {\r\n                                return (\r\n                                    <Message key={message.id} message={message} isThread={true} archiveMessage={this.archiveMessage.bind(this)} />\r\n                                )\r\n                            })\r\n                        }\r\n                    </Collapsible>\r\n                )\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default GmailThread;","import React from 'react'\r\nimport GmailThread from \"./Thread\";\r\nimport { IThread } from './gmailAPI';\r\n\r\nexport default function ThreadList(props: { threads: IThread[], archiveThread: (id: string) => void }) {\r\n    return (\r\n        <>\r\n            {props.threads\r\n                .map(thread => <GmailThread thread={thread} key={thread.id} archiveThread={props.archiveThread}></GmailThread>)}\r\n        </>\r\n    )\r\n}","import React, { MouseEvent } from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport ArchiveIcon from '@material-ui/icons/Archive';\r\nimport translate from '../translations';\r\nimport ThreadList from './ThreadList';\r\nimport gmailInstance, { ILabel, IThread } from './gmailAPI';\r\nimport { withStyles, WithStyles, createStyles } from '@material-ui/core';\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nconst styles = createStyles({\r\n\r\n    root: {\r\n        \"&:hover $archive\": {\r\n            display: \"inline-block\"\r\n        },\r\n        \"&-exit\": {\r\n            overflowX: \"hidden\",\r\n            transform: \"translateX(0)\",\r\n        },\r\n        \"&-exit-active\": {\r\n            transform: \"translateX(100%)\",\r\n            transition: \"transform 0.5s\"\r\n        }\r\n    },\r\n\r\n    archive: {\r\n        display: \"none\",\r\n        cursor: \"pointer\",\r\n        zIndex: 1\r\n    },\r\n});\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n    label?: ILabel,\r\n    category?: string,\r\n    onArchived?: (item: ILabel | string) => void;\r\n}\r\n\r\ninterface State {\r\n    name: string,\r\n    unread: number,\r\n    open: boolean,\r\n    threads: IThread[],\r\n    labelColors?: any,\r\n    mounted: boolean\r\n}\r\n\r\nclass LabelGroup extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        let labelColors = {}\r\n        if (props.label?.color) {\r\n            labelColors = {\r\n                color: props.label.color.textColor,\r\n                backgroundColor: props.label.color.backgroundColor\r\n            }\r\n        }\r\n        let name = ''\r\n        if (props.category) {\r\n            name = translate(props.category);\r\n        } else if (props.label) {\r\n            name = translate(props.label.name);\r\n        }\r\n        this.state = {\r\n            name,\r\n            unread: 0,\r\n            open: false,\r\n            threads: [],\r\n            labelColors,\r\n            mounted: true\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let labelIds = ['INBOX'];\r\n        let query;\r\n        if (this.props.label) {\r\n            labelIds.push(this.props.label.id);\r\n        } else if (this.props.category) {\r\n            query = this.props.category;\r\n        }\r\n\r\n        gmailInstance.listThreads(this.state.name.replace(\":\", \"_\"), query, labelIds).then(result => {\r\n            let { threads, resultSizeEstimate } = result;\r\n            let unread = resultSizeEstimate;\r\n            if (this.props.label) {\r\n                unread = Math.min(this.props.label.messagesUnread, unread);\r\n            }\r\n            if (threads) {\r\n                this.setState({ threads, unread })\r\n            } else {\r\n                this.setState({ unread })\r\n            }\r\n        })\r\n    }\r\n\r\n    toggleOpen() {\r\n        this.setState({ open: !this.state.open });\r\n    }\r\n\r\n    archiveThread(id: string) {\r\n        gmailInstance.archiveThread(id).then(_ => {\r\n            this.setState({ threads: this.state.threads.filter(thread => thread.id !== id) })\r\n        })\r\n    }\r\n\r\n    archive(e: MouseEvent) {\r\n        e.stopPropagation();\r\n        gmailInstance.archiveThreads(this.state.threads.map(thread => thread.id)).then(_ => {\r\n            this.setState({ mounted: false }, () => {\r\n\r\n            })\r\n        });\r\n    }\r\n\r\n    onExited() {\r\n        if (this.props.onArchived) {\r\n            this.props.onArchived(this.props.label || this.props.category || \"\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.unread === 0) {\r\n            return ''\r\n        }\r\n        const { classes } = this.props;\r\n        const rootRef = React.createRef<HTMLDivElement>();\r\n\r\n        return (\r\n            <CSSTransition\r\n                in={this.state.mounted}\r\n                unmountOnExit\r\n                timeout={500}\r\n                classNames={classes.root}\r\n                onExited={this.onExited.bind(this)}\r\n                nodeRef={rootRef}\r\n            >\r\n                <div ref={rootRef} className={classes.root} >\r\n                    <ListItem style={this.state.labelColors} button onClick={this.toggleOpen.bind(this)}>\r\n                        <ListItemText primary={translate(this.state.name)} secondary={this.state.unread}></ListItemText>\r\n                        <ArchiveIcon className={classes.archive} onClick={this.archive.bind(this)}></ArchiveIcon>\r\n                        {this.state.open ? <ExpandLess /> : <ExpandMore />}\r\n                    </ListItem>\r\n                    <Collapse style={{ paddingLeft: \"1em\" }} in={this.state.open} timeout={\"auto\"} mountOnEnter>\r\n                        <ThreadList threads={this.state.threads} archiveThread={this.archiveThread.bind(this)}></ThreadList>\r\n                    </Collapse>\r\n                </div>\r\n            </CSSTransition>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(LabelGroup);","import React from 'react'\r\nimport { get as lsget } from 'local-storage'\r\nimport { systemFolders, keys, ISettings, defaultSettings, categories } from '../constants'\r\nimport CacheFirst, { NetworkFirst } from '../requestCache'\r\nimport ThreadList from './ThreadList'\r\nimport { List } from \"@material-ui/core\";\r\nimport { withStyles } from '@material-ui/core'\r\nimport LabelGroup from './LabelGroup'\r\nimport gmailInstance, { ILabel } from './gmailAPI';\r\n\r\ninterface Props {\r\n    classes: any\r\n}\r\n\r\nclass InboxView extends React.Component<Props, { settings: ISettings, threads: any[], labels: ILabel[] }> {\r\n    labelCache: CacheFirst\r\n    threadCache: NetworkFirst\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {\r\n            settings: lsget(keys.settings) || defaultSettings,\r\n            threads: [],\r\n            labels: []\r\n        }\r\n        this.labelCache = new CacheFirst(keys.CACHE_LABELS);\r\n        this.threadCache = new NetworkFirst(keys.CACHE_THREADS);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getLabels();\r\n        this.getThreads();\r\n    }\r\n\r\n    getLabelFilter() {\r\n        let bundleLabels: ILabel[] = Object.values(this.state.settings.bundleLabels);\r\n        let filter = bundleLabels\r\n            .map(label => label.name)\r\n            .concat(systemFolders)\r\n            .map(label => `NOT label:${label}`)\r\n            .concat(categories.map(category => `NOT ${category}`)).join(\" \")\r\n        //  filter = categories.map(category=>`NOT ${category}`).join(\" \");\r\n        return filter;\r\n\r\n    }\r\n\r\n\r\n    getThreads() {\r\n        gmailInstance.listThreads(\"listThreads\", this.getLabelFilter()).then(result => {\r\n            let threads = result.threads || [];\r\n            this.setState({ threads });\r\n        });\r\n    }\r\n\r\n    getLabels() {\r\n        let labelIds: string[] = Object.values(this.state.settings.bundleLabels).map(label => label.id);\r\n        gmailInstance.getLabels(labelIds, \"bundleLabels\").then(labels => this.setState({ labels }));\r\n    }\r\n\r\n    archiveThread(id: string) {\r\n        gmailInstance.archiveThread(id).then(_ => {\r\n            this.setState({ threads: this.state.threads.filter(thread => thread.id !== id) })\r\n        })\r\n    }\r\n\r\n    labelArchived(label: ILabel | string) {\r\n        this.setState({ labels: this.state.labels.filter(l => l.id !== (label as ILabel).id) })\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <>\r\n                <List className={classes.root}>\r\n                    {categories.map(category => <LabelGroup key={category} category={category} ></LabelGroup>)}\r\n                    {this.state.labels.map(label => <LabelGroup key={label.id} label={label} onArchived={this.labelArchived.bind(this)}></LabelGroup>)}\r\n                    <ThreadList threads={this.state.threads} archiveThread={this.archiveThread.bind(this)}></ThreadList>\r\n                </List>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default withStyles(theme => ({\r\n    root: {\r\n        flex: 1,\r\n        overflowY: 'auto',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}), { withTheme: true })(InboxView)","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './Gmail.css';\r\nimport BundleView from './gmail/BundleView';\r\nimport InboxView from './gmail/InboxView';\r\nimport { Button } from '@material-ui/core';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle'\r\n\r\nimport gmailInstance from './gmail/gmailAPI';\r\n\r\n\r\n\r\n\r\ndeclare global {\r\n    interface Window {\r\n        gapi: any;\r\n        cancelTimeout: any\r\n    }\r\n}\r\n\r\n\r\n\r\nclass GMail extends React.Component<{ onActivation: (title: string) => void }, { isSignedIn: boolean, messages: [], profileImage: string | any }> {\r\n    gapi: any;\r\n    constructor(props: Readonly<{ onActivation: (title: string) => void }>) {\r\n        super(props)\r\n        this.state = {\r\n            isSignedIn: false,\r\n            messages: [],\r\n            profileImage: null,\r\n        }\r\n        props.onActivation(\"Inbox\")\r\n\r\n    }\r\n    componentDidMount() {\r\n        gmailInstance.init();\r\n        gmailInstance.onSignInStatusChanged(this.updateSignInStatus.bind(this));\r\n    }\r\n\r\n    updateSignInStatus(isSignedIn: boolean) {\r\n        this.setState({ isSignedIn })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"gmail\">\r\n                {this.state.isSignedIn ?\r\n                    // <BundleView logo={logo} gmailApi={this.state.gmailApi}></BundleView> \r\n                    <InboxView /> :\r\n                    <>\r\n                        <h3>GManuail</h3>\r\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={gmailInstance.authorize.bind(gmailInstance)}>\r\n                            <AccountCircle />\r\n                            &nbsp;&nbsp;Authorize with Gmail Account\r\n                        </Button>\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GMail;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: 'auto',\r\n        overflow: 'auto'\r\n    },\r\n    cardHeader: {\r\n        padding: theme.spacing(1, 2),\r\n    },\r\n    list: {\r\n        width: 300,\r\n        height: '60vh',\r\n        minHeight: 200,\r\n        backgroundColor: theme.palette.background.paper,\r\n        overflow: 'auto',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(0.5, 0),\r\n    },\r\n}));\r\n\r\nfunction not(a: any[], b: any[]) {\r\n    return a.filter((value: any) => b.indexOf(value) === -1);\r\n}\r\n\r\nfunction intersection(a: any[], b: any[]) {\r\n    return a.filter((value: any) => b.indexOf(value) !== -1);\r\n}\r\n\r\nfunction union(a: any[], b: any[]) {\r\n    return [...a, ...not(b, a)];\r\n}\r\n\r\nexport default function TransferList(props: { labelProvider: any; selectionChanged: any; left: any[]; right: any[] }) {\r\n    const classes = useStyles();\r\n    const [checked, setChecked] = React.useState([] as any[]);\r\n    const [left, setLeft] = React.useState([] as any[]);\r\n    const [right, setRight] = React.useState([] as any[]);\r\n    const getLabel = props.labelProvider;\r\n    const rightUpdated = props.selectionChanged;\r\n\r\n    React.useEffect(() => {\r\n        setLeft(props.left)\r\n    }, [props.left]);\r\n\r\n    React.useEffect(() => {\r\n        setRight(props.right)\r\n    }, [props.right]);\r\n\r\n    const leftChecked = intersection(checked, left);\r\n    const rightChecked = intersection(checked, right);\r\n\r\n    const handleToggle = (value: any) => () => {\r\n        const currentIndex = checked.indexOf(value);\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        setChecked(newChecked);\r\n    };\r\n\r\n    const numberOfChecked = (items: any[]) => intersection(checked, items).length;\r\n\r\n    const handleToggleAll = (items: any[]) => () => {\r\n        if (numberOfChecked(items) === items.length) {\r\n            setChecked(not(checked, items));\r\n        } else {\r\n            setChecked(union(checked, items));\r\n        }\r\n    };\r\n\r\n    const handleCheckedRight = () => {\r\n        const added = leftChecked;\r\n        setRight(right.concat(added));\r\n        setLeft(not(left, leftChecked));\r\n        setChecked(not(checked, leftChecked));\r\n        rightUpdated(added, [])\r\n    };\r\n\r\n    const handleCheckedLeft = () => {\r\n        const removed = rightChecked;\r\n        setLeft(left.concat(rightChecked));\r\n        setRight(not(right, rightChecked));\r\n        setChecked(not(checked, rightChecked));\r\n        rightUpdated([], removed);\r\n    };\r\n\r\n    const customList = (title: string, items: any[]) => (\r\n        <Card>\r\n            <CardHeader\r\n                className={classes.cardHeader}\r\n                avatar={\r\n                    <Checkbox\r\n                        onClick={handleToggleAll(items)}\r\n                        checked={numberOfChecked(items) === items.length && items.length !== 0}\r\n                        indeterminate={numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0}\r\n                        disabled={items.length === 0}\r\n                        inputProps={{ 'aria-label': 'all items selected' }}\r\n                    />\r\n                }\r\n                title={title}\r\n                subheader={`${numberOfChecked(items)}/${items.length} selected`}\r\n            />\r\n            <Divider />\r\n            <List className={classes.list} dense component=\"div\" role=\"list\">\r\n                {items.map((value: any) => {\r\n                    const label = getLabel(value);\r\n                    const labelId = `transfer-list-all-item-${label}-label`;\r\n\r\n                    return (\r\n                        <ListItem key={label} role=\"listitem\" button onClick={handleToggle(value)}>\r\n                            <ListItemIcon>\r\n                                <Checkbox\r\n                                    checked={checked.indexOf(value) !== -1}\r\n                                    tabIndex={-1}\r\n                                    disableRipple\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                />\r\n                            </ListItemIcon>\r\n                            <ListItemText id={labelId} primary={`${label}`} />\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n                <ListItem />\r\n            </List>\r\n        </Card>\r\n    );\r\n\r\n    return (\r\n        <Grid container spacing={2} justify=\"center\" alignItems=\"center\" className={classes.root}>\r\n            <Grid item>{customList('Choices', left)}</Grid>\r\n            <Grid item>\r\n                <Grid container direction=\"column\" alignItems=\"center\">\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        className={classes.button}\r\n                        onClick={handleCheckedRight}\r\n                        disabled={leftChecked.length === 0}\r\n                        aria-label=\"move selected right\"\r\n                    >\r\n                        &gt;\r\n          </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        className={classes.button}\r\n                        onClick={handleCheckedLeft}\r\n                        disabled={rightChecked.length === 0}\r\n                        aria-label=\"move selected left\"\r\n                    >\r\n                        &lt;\r\n          </Button>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item>{customList('Chosen', right)}</Grid>\r\n        </Grid>\r\n    );\r\n}","import React from 'react';\r\nimport { get as lsget, set as lsset } from 'local-storage';\r\nimport './Settings.css';\r\nimport TransferList from './components/TransferList';\r\nimport CacheFirst from './requestCache';\r\nimport translate from './translations';\r\nimport { noShow, defaultSettings, keys, categories } from './constants';\r\nimport { arrayToMap } from './utils';\r\nimport gmailInstance from './gmail/gmailAPI';\r\n\r\n\r\ninterface Props {\r\n    onActivation: (title: string) => void\r\n}\r\n\r\ninterface State {\r\n    labels: any,\r\n    bundleLabels: any,\r\n    sortLabel: any,\r\n}\r\n\r\nexport default class Settings extends React.Component<Props, State> {\r\n    cache: CacheFirst;\r\n\r\n    constructor(props: Readonly<Props>) {\r\n        super(props)\r\n        this.state = lsget(keys.settings) || defaultSettings;\r\n        this.cache = new CacheFirst(keys.CACHE_LABELS);\r\n        props.onActivation(\"Settings\");\r\n    }\r\n\r\n    componentDidMount() {\r\n        gmailInstance.onSignInStatusChanged(isSignedIn => {\r\n            if (isSignedIn) {\r\n                gmailInstance.listAllLabels().then(labels => {\r\n                    return labels.filter(label => !noShow.includes(label.id))\r\n                        .filter(label => !categories.includes(label.id.replace(\"_\", \":\").toLowerCase()))\r\n                        .sort((a, b) => translate(a.name) > translate(b.name) ? 1 : -1);\r\n                }).then(labels => {\r\n                    let labelMap = arrayToMap(labels, label => label.id, label => label);\r\n                    let unchosen: any = {}\r\n                    for (let key in labelMap) {\r\n                        if (!this.state.bundleLabels[key]) {\r\n                            unchosen[key] = labelMap[key];\r\n                        }\r\n                    }\r\n                    this.setState({ labels: unchosen });\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        lsset('settings', this.state);\r\n    }\r\n\r\n    selectionChanged(added: string | any[], removed: string | any[]) {\r\n        if (added.length === 0 && removed.length === 0)\r\n            return;\r\n\r\n        let labels = Object.assign({}, this.state.labels);\r\n        let bundleLabels = Object.assign({}, this.state.bundleLabels);\r\n\r\n        for (let add of added) {\r\n            bundleLabels[add.id] = add;\r\n            delete labels[add.id];\r\n        }\r\n\r\n        for (let remove of removed) {\r\n            delete bundleLabels[remove.id];\r\n            labels[remove.id] = remove;\r\n        }\r\n\r\n        this.setState({ labels, bundleLabels })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"settings\">\r\n                <h2>Settings</h2>\r\n                <TransferList left={Object.values(this.state.labels)} right={Object.values(this.state.bundleLabels)} labelProvider={(label: { name: string; }) => translate(label.name)} selectionChanged={this.selectionChanged.bind(this)}></TransferList>\r\n            </div>\r\n        )\r\n    }\r\n}","/**\r\n * Adapted from example code https://material-ui.com/components/drawers/#mini-variant-drawer\r\n */\r\n\r\nimport React, { useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport { createStyles, makeStyles, useTheme, Theme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    hide: {\r\n      display: 'none',\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    drawerOpen: {\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    drawerClose: {\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      overflowX: 'hidden',\r\n      width: 0,\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: theme.spacing(9) + 1,\r\n      },\r\n    },\r\n    toolbar: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'flex-end',\r\n      padding: theme.spacing(0, 1),\r\n      // necessary for content to be below app bar\r\n      ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function MiniDrawer(props : any) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const { handleDrawerClose, ...otherProps} = props;\r\n  useEffect(()=>{\r\n    setOpen(props.open);\r\n  },[props.open])\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        className={clsx(classes.drawer, {\r\n          [classes.drawerOpen]: open,\r\n          [classes.drawerClose]: !open,\r\n        })}\r\n        classes={{\r\n          paper: clsx({\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          }),\r\n        }}\r\n      >\r\n        <div className={classes.toolbar}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List {...otherProps} >\r\n            \r\n        </List>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport GMail from './GMail'\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { createMuiTheme, ThemeProvider, makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n} from \"react-router-dom\";\r\nimport Settings from './Settings';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport clsx from 'clsx';\r\nimport { IconButton, ListItem, ListItemIcon, ListItemText, Avatar } from '@material-ui/core';\r\nimport MiniDrawer from './components/MiniDrawer';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport gmailInstance from './gmail/gmailAPI';\r\nimport ExitToApp from '@material-ui/icons/ExitToApp';\r\n\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) => {\r\n  return createStyles({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    content: {\r\n      marginTop: \"56px\",\r\n      height: \"calc(100vh - 56px)\",\r\n      [theme.breakpoints.up(\"xs\") + \"and (orientation: landscape)\"]: {\r\n        marginTop: \"48px\",\r\n        height: \"calc(100vh - 48px)\",\r\n      },\r\n      width: `100vw`,\r\n      marginLeft: 0,\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: `calc(100vw - ${theme.spacing(10)}px)`,\r\n        marginLeft: theme.spacing(10),\r\n        marginTop: \"64px\",\r\n        height: \"calc(100vh - 64px)\",\r\n      },\r\n      // flexGrow: \"1\",\r\n      backgroundColor: \"#111\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      color: \"white\",\r\n      transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    shroud: {\r\n      display: 'none',\r\n      [theme.breakpoints.down('xs')]: {\r\n        display: 'block',\r\n        position: 'absolute',\r\n        left: 0,\r\n        top: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        backgroundColor: 'rgba(0,0,0,0.7)',\r\n        cursor: 'pointer',\r\n        zIndex: 1\r\n      }\r\n    },\r\n    appBarShift: {\r\n      [theme.breakpoints.up('sm')]: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100vw - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n          easing: theme.transitions.easing.sharp,\r\n          duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n      }\r\n    },\r\n    menuButton: {\r\n      marginRight: 36,\r\n    },\r\n    hide: {\r\n      [theme.breakpoints.up('sm')]: {\r\n        display: 'none',\r\n      }\r\n    },\r\n    toolbar: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      //justifyContent: 'flex-end',\r\n      padding: theme.spacing(0, 1),\r\n      // necessary for content to be below app bar\r\n      ...theme.mixins.toolbar,\r\n    },\r\n    buttons: {\r\n      marginLeft: \"auto\"\r\n    }\r\n  })\r\n});\r\n\r\nfunction App() {\r\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [isSignedIn, setSignedIn] = React.useState(false);\r\n  const [profileImage, setProfileImage] = React.useState('');\r\n  const [title, setTitle] = React.useState('')\r\n  React.useEffect(() => {\r\n    gmailInstance.onSignInStatusChanged(isSignedIn => {\r\n      setSignedIn(isSignedIn);\r\n      if (isSignedIn) {\r\n        if (isSignedIn) {\r\n          var profile = gmailInstance.getCurrentUserProfile();\r\n          setProfileImage(profile.getImageUrl());\r\n        }\r\n      }\r\n    })\r\n  }, [])\r\n  const handleDrawerOpen = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const theme = React.useMemo(\r\n    () =>\r\n      createMuiTheme({\r\n        palette: {\r\n          type: prefersDarkMode ? 'dark' : 'light',\r\n        },\r\n      }),\r\n    [prefersDarkMode],\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar className={clsx(classes.toolbar)}>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, {\r\n              [classes.hide]: open,\r\n            })}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            {title}\r\n          </Typography>\r\n          <div className={classes.buttons}>\r\n            {!isSignedIn ?\r\n              '' :\r\n              <div style={{ display: 'inline-flex' }}>\r\n                <Avatar src={profileImage}></Avatar>\r\n                <IconButton onClick={gmailInstance.signOut.bind(gmailInstance)}>\r\n                  <ExitToApp />\r\n                </IconButton>\r\n              </div>\r\n            }\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Router>\r\n        <div className={clsx({ [classes.shroud]: open })} onClick={handleDrawerClose} />\r\n        <MiniDrawer open={open} handleDrawerClose={handleDrawerClose}>\r\n          <Link className=\"nostyle\" to=\"/\">\r\n            <ListItem>\r\n              <ListItemIcon>\r\n                <MailIcon />\r\n              </ListItemIcon>\r\n              <ListItemText>\r\n                Inbox\r\n            </ListItemText>\r\n            </ListItem>\r\n          </Link>\r\n          <Link className=\"nostyle\" to=\"/settings\">\r\n            <ListItem>\r\n              <ListItemIcon>\r\n                <SettingsIcon />\r\n              </ListItemIcon>\r\n              <ListItemText>\r\n                Settings\r\n            </ListItemText>\r\n            </ListItem>\r\n          </Link>\r\n        </MiniDrawer>\r\n        <div className={clsx(classes.content, {\r\n          [classes.appBarShift]: open,\r\n        }) + \" App\"}>\r\n          <Switch>\r\n            <Route path=\"/settings\">\r\n              <Settings onActivation={setTitle}></Settings>\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <GMail onActivation={setTitle}></GMail>\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}